# app.py
import streamlit as st
import json, time
from typing import Dict, Any, List

# Import exactly what this app needs from our canvas_api
from canvas_api import (
    whoami, add_to_module, create_new_quiz, get_new_quiz_items,
    publish_assignment, assignment_url, update_new_quiz_item, delete_new_quiz_item
)
from new_quiz_items import NewQuizItemBuilder, post_new_quiz_item, SUPPORTED_TYPES
from quiz_tag_parser import QuizTagParser
from storyboard import load_storyboard_text

st.set_page_config(page_title="Canvas API Uploader (New Quizzes)", layout="wide")
st.title("Canvas New Quizzes Uploader (All Item Types)")

with st.sidebar:
    st.header("Canvas Settings")
    canvas_domain = st.text_input("Canvas domain (no protocol)", placeholder="your.instructure.com")
    canvas_token = st.text_input("Canvas Access Token", type="password")
    course_id = st.text_input("Course ID", placeholder="12345")
    module_id = st.text_input("Module ID (optional, for Add to Module)", placeholder="67890")
    st.markdown("---")
    st.caption("Question types: " + ", ".join(sorted(SUPPORTED_TYPES)))

tab1, tab2 = st.tabs(["Upload Storyboard", "Quick Test"])

# -------------------------
# helpers
# -------------------------

def _ensure_items(canvas_domain, course_id, assignment_id, expected_count, token, poll_secs=4, attempts=6):
    last = None
    for _ in range(attempts):
        status, data = get_new_quiz_items(canvas_domain, course_id, assignment_id, token)
        if isinstance(data, list) and len(data) >= expected_count:
            return True, data
        last = (status, data)
        time.sleep(poll_secs)
    return False, last

def _is_bad_item(it: dict) -> bool:
    e = it.get("entry") or {}
    slug = (e.get("interaction_type_slug") or "").strip()
    body = e.get("item_body") or e.get("itemBody")
    if not e or not slug or body is None:
        return True
    if slug in {"choice", "multi-answer", "matching", "ordering", "categorization", "rich-fill-blank"}:
        if not isinstance(e.get("interaction_data"), dict):
            return True
    return False

# -------------------------
# main UI
# -------------------------

with tab1:
    st.subheader("Upload Storyboard (.docx or .txt)")
    up = st.file_uploader("Upload a storyboard file", type=["docx", "txt"])
    if up is not None:
        raw_text = load_storyboard_text(up)
        st.text_area("Raw storyboard (detected)", raw_text, height=200)
        pages = raw_text.split("</canvas_page>")
        pages = [p + "</canvas_page>" for p in pages if "<canvas_page>" in p]
        st.write(f"Detected {len(pages)} <canvas_page> block(s).")

        for i, block in enumerate(pages, start=1):
            with st.expander(f"Canvas Page #{i}"):
                st.code(block, language="xml")

                if "<quiz_start>" in block.lower():
                    st.info("Quiz block detected in this page.")
                    parser = QuizTagParser()
                    out = parser.parse(block)
                    qs = out.get("questions", [])
                    st.write(f"Parsed {len(qs)} question(s).")
                    st.json(out)

                    colA, colB = st.columns(2)
                    with colA:
                        quiz_title = st.text_input(f"Quiz Title (Page #{i})", f"Quiz from Page {i}", key=f"title_{i}")
                    with colB:
                        description = st.text_area(f"Quiz Description (Page #{i})", "Generated by API Uploader", key=f"desc_{i}")

                    if st.button(f"Create & Upload New Quiz for Page #{i}", key=f"upload_{i}"):
                        # validation
                        if not (canvas_domain and canvas_token and course_id):
                            st.error("Canvas settings are required in the sidebar.")
                            st.stop()
                        if len(qs) == 0:
                            st.error("Parsed 0 questions. Check <quiz_start>..</quiz_end> and <question> tags.")
                            st.stop()

                        # token sanity check
                        ok_code, ok_body = whoami(canvas_domain, canvas_token)
                        if ok_code != 200:
                            st.error("Canvas rejected the access token (cannot GET /users/self).")
                            st.code({"status": ok_code, "body": ok_body})
                            st.stop()
                        else:
                            name = (ok_body or {}).get("name") or (ok_body or {}).get("short_name") or "user"
                            st.caption(f"Token OK — acting as: {name} (id {(ok_body or {}).get('id')})")

                        # create quiz
                        created = create_new_quiz(canvas_domain, course_id, quiz_title, description, canvas_token)
                        if not created or not created.get("assignment_id"):
                            st.error("Create New Quiz did not return an assignment_id.")
                            st.code(json.dumps((created or {}).get("http_debug", {}), indent=2), language="json")
                            st.stop()

                        assignment_id = created["assignment_id"]

                        # post items
                        builder = NewQuizItemBuilder()
                        success_ct = 0
                        failures = []
                        for pos, q in enumerate(qs, start=1):
                            try:
                                payload = builder.build_item(q)

                                # --- DEBUG: show the exact payload we’re about to POST ---
                                SHOW_ALL_PAYLOADS = False  # set True to dump every item
                                if SHOW_ALL_PAYLOADS or pos == 1:
                                    st.write(f"DEBUG • About to POST item #{pos}")
                                    st.code(json.dumps(payload, indent=2), language="json")
                                # ----------------------------------------------------------

                                resp = post_new_quiz_item(
                                    canvas_domain, course_id, assignment_id, payload, canvas_token, position=pos
                                )
                                try:
                                    body = resp.json()
                                except Exception:
                                    body = resp.text
                                if resp.status_code in (200, 201):
                                    success_ct += 1
                                else:
                                    failures.append({"position": pos, "status": resp.status_code, "body": body})
                            except Exception as e:
                                failures.append({"position": pos, "status": "client-exception", "body": str(e)})


                        st.success(f"New Quiz created. {success_ct}/{len(qs)} item requests succeeded. (assignment_id={assignment_id})")

                        # poll & display
                        ok, items_or_last = _ensure_items(canvas_domain, course_id, assignment_id, len(qs), canvas_token)
                        if ok:
                            st.caption("Items present on server:")
                            st.code(json.dumps(items_or_last, indent=2), language="json")
                        else:
                            st.warning("Items not all present yet; showing last response:")
                            st.code(json.dumps(items_or_last[1], indent=2), language="json")

                        # publish + add to module
                        if publish_assignment(canvas_domain, course_id, assignment_id, canvas_token):
                            st.success("Assignment published.")
                        else:
                            st.warning("Could not publish assignment. You can publish it manually in Canvas.")
                        if module_id:
                            okm = add_to_module(canvas_domain, course_id, module_id, "Assignment", assignment_id, quiz_title, canvas_token)
                            st.success("Added to Module.") if okm else st.warning("Could not add to Module (check module id/permissions).")

                        st.markdown(f"[Open in Canvas]({assignment_url(canvas_domain, course_id, assignment_id)})")

                        # -------- spinner repair button --------
                        st.markdown("---")
                        if st.button("Fix spinning Build page (purge bad items, re-post clean ones)", key=f"repair_{i}"):
                            status, items = get_new_quiz_items(canvas_domain, course_id, assignment_id, canvas_token)
                            if status != 200 or not isinstance(items, list):
                                st.error("Could not read items from Canvas.")
                                st.code({"status": status, "body": items})
                                st.stop()

                            suspects = [it for it in items if _is_bad_item(it)]
                            if suspects:
                                st.warning(f"Found {len(suspects)} suspect item(s). Deleting them…")
                                deleted_report = []
                                for it in suspects:
                                    r = delete_new_quiz_item(canvas_domain, course_id, assignment_id, it["id"], canvas_token)
                                    try:
                                        body = r.json()
                                    except Exception:
                                        body = r.text
                                    deleted_report.append({"id": it["id"], "position": it.get("position"), "status": r.status_code, "body": body})
                                st.code(deleted_report, language="json")
                            else:
                                st.info("No obviously bad items found. Will re-post any missing positions anyway.")

                            status2, items2 = get_new_quiz_items(canvas_domain, course_id, assignment_id, canvas_token)
                            existing_positions = {int(it.get("position", 0)) for it in items2} if isinstance(items2, list) else set()
                            intended_positions = set(range(1, len(qs) + 1))
                            missing_positions = sorted(intended_positions - existing_positions)

                            builder = NewQuizItemBuilder()
                            readd_results = []
                            for pos in missing_positions:
                                payload = builder.build_item(qs[pos - 1])
                                r = post_new_quiz_item(canvas_domain, course_id, assignment_id, payload, canvas_token, position=pos)
                                try:
                                    body = r.json()
                                except Exception:
                                    body = r.text
                                readd_results.append({"pos": pos, "status": getattr(r, "status_code", None), "body": body})
                            if readd_results:
                                st.write("Reposted missing items:")
                                st.code(readd_results, language="json")

                            ok3, items_final = _ensure_items(canvas_domain, course_id, assignment_id, len(qs), canvas_token, poll_secs=3, attempts=6)
                            if ok3:
                                st.success("Quiz items look healthy now.")
                                st.code(items_final, language="json")
                            else:
                                st.warning("Items still not complete; showing last response:")
                                st.code(items_final, language="json")

                            publish_assignment(canvas_domain, course_id, assignment_id, canvas_token)
                            st.markdown(f"[Open in Canvas]({assignment_url(canvas_domain, course_id, assignment_id)})")

with tab2:
    st.subheader("Try a Minimal Example")
    example = """<canvas_page>
<quiz_start>
<question><multiple_choice><no_shuffle>
What is 2 + 2?
* 4 <feedback> Correct
3 <feedback> Off by one
5 <feedback> Too high
</question>

<question><true_false>
The sky is blue.
correct: True
</question>

<question><fill_in_blank>
Water formula: H{{b1}}O is {{b2}}.
blank b1:
  - 2
blank b2:
  - water
</question>
</quiz_end>
</canvas_page>"""
    st.code(example, language="xml")
    st.caption("Paste this into a .txt file to test.")
