
import streamlit as st
import json
from pathlib import Path
from typing import Dict, Any, List

from canvas_api import add_to_module, create_new_quiz, BASE, H
from new_quiz_items import NewQuizItemBuilder, post_new_quiz_item, SUPPORTED_TYPES
from quiz_tag_parser import QuizTagParser
from storyboard import load_storyboard_text

st.set_page_config(page_title="Canvas API Uploader (New Quizzes)", layout="wide")

st.title("Canvas New Quizzes Uploader (All Item Types)")

with st.sidebar:
    st.header("Canvas Settings")
    canvas_domain = st.text_input("Canvas domain (no protocol)", placeholder="your.instructure.com")
    canvas_token = st.text_input("Canvas Access Token", type="password")
    course_id = st.text_input("Course ID", placeholder="12345")
    module_id = st.text_input("Module ID (optional, for Add to Module)", placeholder="67890")
    st.markdown("---")
    st.caption("This app supports New Quizzes via /api/quiz/v1 and Quiz Items API.")
    st.caption("Question types: " + ", ".join(sorted(SUPPORTED_TYPES)))

tab1, tab2 = st.tabs(["Upload Storyboard", "Quick Test"])

with tab1:
    st.subheader("Upload Storyboard (.docx or .txt)")
    up = st.file_uploader("Upload a storyboard file", type=["docx", "txt"])
    if up is not None:
        raw_text = load_storyboard_text(up)
        st.text_area("Raw storyboard (detected)", raw_text, height=200)
        pages = raw_text.split("</canvas_page>")
        pages = [p + "</canvas_page>" for p in pages if "<canvas_page>" in p]
        st.write(f"Detected {len(pages)} <canvas_page> block(s).")

        for i, block in enumerate(pages, start=1):
            with st.expander(f"Canvas Page #{i}"):
                st.code(block, language="xml")
                # Detect a quiz block
                if "<quiz_start>" in block.lower():
                    st.info("Quiz block detected in this page.")
                    parser = QuizTagParser()
                    out = parser.parse(block)
                    qs = out.get("questions", [])
                    st.write(f"Parsed {len(qs)} question(s).")
                    st.json(out)

                    colA, colB = st.columns(2)
                    with colA:
                        quiz_title = st.text_input(f"Quiz Title (Page #{i})", f"Quiz from Page {i}", key=f"title_{i}")
                    with colB:
                        description = st.text_area(f"Quiz Description (Page #{i})", "Generated by API Uploader", key=f"desc_{i}")

                    if st.button(f"Create & Upload New Quiz for Page #{i}", key=f"upload_{i}"):
                        # Validation
                        if not (canvas_domain and canvas_token and course_id):
                            st.error("Canvas settings are required in the sidebar."); st.stop()
                        # Create quiz
                        created = create_new_quiz(canvas_domain, course_id, quiz_title, description, canvas_token)
                        if not created:
                            st.error("Failed to create New Quiz."); st.stop()
                        assignment_id = created.get("assignment_id")
                        if not assignment_id:
                            st.error("No assignment_id returned from create_new_quiz."); st.stop()

                        builder = NewQuizItemBuilder()
                        success_ct = 0
                        for pos, q in enumerate(qs, start=1):
                            try:
                                payload = builder.build_item(q)
                                resp = post_new_quiz_item(canvas_domain, course_id, assignment_id, payload, canvas_token, position=pos)
                                if resp and resp.status_code in (200, 201):
                                    success_ct += 1
                                else:
                                    st.warning(f"Item {pos} failed: {getattr(resp, 'text', '')}")
                            except Exception as e:
                                st.warning(f"Item {pos} error: {e}")

                        st.success(f"New Quiz created. {success_ct}/{len(qs)} items added. (assignment_id={assignment_id})")

                        if module_id:
                            ok = add_to_module(canvas_domain, course_id, module_id, "Assignment", assignment_id, quiz_title, canvas_token)
                            if ok:
                                st.success("Added to Module.")
                            else:
                                st.warning("Could not add to Module (check module id/permissions).")

with tab2:
    st.subheader("Try a Minimal Example")
    example = """<canvas_page>
<quiz_start>
<question><multiple_choice><no_shuffle>
What is 2 + 2?
* 4 <feedback> Correct
3 <feedback> Off by one
5 <feedback> Too high
</question>

<question><true_false>
The sky is blue.
correct: True
</question>

<question><short_answer>
Name a primary color.
answers:
Red
Blue
Yellow
</question>

<question><numeric>
What is the speed (m/s)?
exact: 12.5
tolerance: 0.5
</question>

<question><matching>
Match the chemical to its common name.
pairs:
H2O => Water
NaCl => Salt
</question>

<question><ordering>
Order the stages:
order:
First
Second
Third
</question>

<question><categorization>
Sort animals:
category Mammals:
Dog
Cat
category Birds:
Eagle
Sparrow
</question>

<question><fill_in_blank>
Water formula: H{{b1}}O is {{b2}}.
blank b1:
  - 2
blank b2:
  - water
</question>
</quiz_end>
</canvas_page>"""
    st.code(example, language="xml")
    st.caption("Paste this into a .txt file to test.")
