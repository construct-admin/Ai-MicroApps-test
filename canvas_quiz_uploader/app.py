# app.py — full page with validators, reset, and debug dumps
import sys, pathlib
sys.path.insert(0, str(pathlib.Path(__file__).parent.resolve()))

import streamlit as st
import json
from typing import Dict, Any, List

from canvas_api import (
    whoami, add_to_module, create_new_quiz, get_new_quiz_items,
    publish_assignment, assignment_url, update_new_quiz_item,
    delete_all_new_quiz_items
)
from new_quiz_items import NewQuizItemBuilder, post_new_quiz_item, SUPPORTED_TYPES
from quiz_tag_parser import QuizTagParser
from storyboard import load_storyboard_text

st.set_page_config(page_title="Canvas API Uploader (New Quizzes)", layout="wide")
st.title("Canvas New Quizzes Uploader (All Item Types)")

def validate_item_payload(p: dict) -> List[str]:
    errs = []
    entry = p.get("item", {}).get("entry", {}) if isinstance(p, dict) else {}
    slug = (entry.get("interaction_type_slug") or "").lower()

    if slug in ("choice", "multi-answer"):
        choices = (entry.get("interaction_data") or {}).get("choices") or []
        if len(choices) < 2:
            errs.append(f"{slug}: needs ≥2 choices, has {len(choices)}")
        ids = [c.get("id") for c in choices if c.get("id")]
        if slug == "choice":
            val = ((entry.get("scoring_data") or {}).get("value"))
            if val not in ids:
                errs.append("choice: scoring_data.value not in choices")
        else:
            vals = ((entry.get("scoring_data") or {}).get("value")) or []
            bad = [v for v in vals if v not in ids]
            if bad:
                errs.append(f"multi-answer: invalid ids in value: {bad}")

    if slug == "rich-fill-blank":
        val = (entry.get("scoring_data") or {}).get("value") or {}
        bmap = val.get("blank_to_correct_answer_ids") or {}
        if not bmap:
            errs.append("fill-in-blank: missing blank_to_correct_answer_ids")

    if slug == "numeric":
        v = (entry.get("scoring_data") or {}).get("value") or []
        if not isinstance(v, list) or not v:
            errs.append("numeric: scoring_data.value must be non-empty list")

    if slug == "matching":
        ia = entry.get("interaction_data") or {}
        if not (ia.get("choices") and ia.get("prompts")):
            errs.append("matching: needs choices and prompts")
    if slug == "ordering":
        ia = entry.get("interaction_data") or {}
        if not (ia.get("choices") and (entry.get("scoring_data") or {}).get("value")):
            errs.append("ordering: choices or scoring value missing")
    if slug == "categorization":
        ia = entry.get("interaction_data") or {}
        if not (ia.get("categories") and ia.get("choices")):
            errs.append("categorization: categories or choices missing")

    return errs

with st.sidebar:
    st.header("Canvas Settings")
    canvas_domain = st.text_input("Canvas domain (no protocol)", placeholder="your.instructure.com")
    canvas_token = st.text_input("Canvas Access Token", type="password")
    course_id = st.text_input("Course ID", placeholder="12345")
    module_id = st.text_input("Module ID (optional, for Add to Module)", placeholder="67890")
    st.markdown("---")
    st.caption("Question types: " + ", ".join(sorted(SUPPORTED_TYPES)))

tab1, tab2 = st.tabs(["Upload Storyboard", "Quick Test"])

with tab1:
    st.subheader("Upload Storyboard (.docx or .txt)")
    up = st.file_uploader("Upload a storyboard file", type=["docx", "txt"])
    if up is not None:
        raw_text = load_storyboard_text(up)
        st.text_area("Raw storyboard (detected)", raw_text, height=200)
        pages = raw_text.split("</canvas_page>")
        pages = [p + "</canvas_page>" for p in pages if "<canvas_page>" in p]
        st.write(f"Detected {len(pages)} <canvas_page> block(s).")

        for i, block in enumerate(pages, start=1):
            with st.expander(f"Canvas Page #{i}"):
                st.code(block, language="xml")

                if "<quiz_start>" in block.lower():
                    st.info("Quiz block detected in this page.")
                    parser = QuizTagParser()
                    out = parser.parse(block)
                    qs = out.get("questions", [])
                    st.write(f"Parsed {len(qs)} question(s).")
                    st.json(out)

                    colA, colB = st.columns(2)
                    with colA:
                        quiz_title = st.text_input(f"Quiz Title (Page #{i})", f"Quiz from Page {i}", key=f"title_{i}")
                    with colB:
                        description = st.text_area(f"Quiz Description (Page #{i})", "Generated by API Uploader", key=f"desc_{i}")

                    if st.button(f"Create & Upload New Quiz for Page #{i}", key=f"upload_{i}"):
                        if not (canvas_domain and canvas_token and course_id):
                            st.error("Canvas settings are required in the sidebar.")
                            st.stop()
                        if len(qs) == 0:
                            st.error("Parsed 0 questions. Ensure <question>...</question> blocks and </quiz_end>.")
                            st.stop()

                        # Quick token sanity (optional)
                        code, me = whoami(canvas_domain, canvas_token)
                        if code != 200:
                            st.error("Token check failed.")
                            st.code(json.dumps(me, indent=2), language="json")
                            st.stop()

                        created = create_new_quiz(canvas_domain, course_id, quiz_title, description, canvas_token)
                        if not created or not created.get("assignment_id"):
                            st.error("Create New Quiz did not return an assignment_id.")
                            st.caption("Canvas response attempts:")
                            st.code(json.dumps(created.get("http_debug", {}), indent=2), language="json")
                            st.stop()

                        assignment_id = created["assignment_id"]

                        builder = NewQuizItemBuilder()
                        success_ct = 0
                        failures = []

                        for pos, q in enumerate(qs, start=1):
                            try:
                                payload = builder.build_item(q)

                                # Validate before POST
                                problems = validate_item_payload(payload)
                                if problems:
                                    st.warning(f"Item #{pos} failed validation: {problems}")

                                # Show first payload for visibility
                                if pos == 1:
                                    st.write("DEBUG • About to POST item #1")
                                    st.code(json.dumps(payload, indent=2), language="json")

                                resp = post_new_quiz_item(canvas_domain, course_id, assignment_id, payload, canvas_token, position=pos)
                                try:
                                    body = resp.json()
                                except Exception:
                                    body = resp.text
                                if resp.status_code in (200, 201):
                                    success_ct += 1
                                else:
                                    failures.append({"position": pos, "status": resp.status_code, "body": body})
                            except Exception as e:
                                failures.append({"position": pos, "status": "client-exception", "body": str(e)})

                        st.success(f"New Quiz created. {success_ct}/{len(qs)} item requests succeeded. (assignment_id={assignment_id})")

                        status_code, items_data = get_new_quiz_items(canvas_domain, course_id, assignment_id, canvas_token)
                        st.caption(f"Items GET status: {status_code}")
                        st.code(json.dumps(items_data, indent=2), language="json")

                        if publish_assignment(canvas_domain, course_id, assignment_id, canvas_token):
                            st.success("Assignment published.")
                        else:
                            st.warning("Could not publish assignment (you can publish it manually).")

                        from canvas_api import assignment_url
                        st.markdown(f"[Open in Canvas]({assignment_url(canvas_domain, course_id, assignment_id)})")

                        if st.button("Reset items (delete all) and re-post"):
                            summary = delete_all_new_quiz_items(canvas_domain, course_id, assignment_id, canvas_token)
                            st.info(f"Deleted {summary.get('deleted', 0)} existing item(s).")

                            builder = NewQuizItemBuilder()
                            success_ct, failures = 0, []
                            for pos, q in enumerate(qs, start=1):
                                payload = builder.build_item(q)
                                problems = validate_item_payload(payload)
                                if problems:
                                    st.warning(f"Item #{pos} failed validation: {problems}")
                                r = post_new_quiz_item(canvas_domain, course_id, assignment_id, payload, canvas_token, position=pos)
                                try:
                                    body = r.json()
                                except Exception:
                                    body = r.text
                                if r.status_code in (200, 201):
                                    success_ct += 1
                                else:
                                    failures.append({"position": pos, "status": r.status_code, "body": body})
                            st.success(f"Re-posted {success_ct}/{len(qs)} items.")
                            if failures:
                                st.code(json.dumps(failures, indent=2), language="json")

with tab2:
    st.subheader("Try a Minimal Example")
    example = """<canvas_page>
<quiz_start>
<question><multiple_choice><no_shuffle>
What is 2 + 2?
* 4 <feedback> Correct
3 <feedback> Off by one
5 <feedback> Too high
</question>

<question><true_false>
The sky is blue.
correct: True
</question>

<question><short_answer>
Name a primary color.
answers:
Red
Blue
Yellow
</question>

<question><numeric>
What is the speed (m/s)?
exact: 12.5
tolerance: 0.5
</question>

<question><matching>
Match the chemical to its common name.
pairs:
H2O => Water
NaCl => Salt
</question>

<question><ordering>
Order the stages:
order:
First
Second
Third
</question>

<question><categorization>
Sort animals:
category Mammals:
Dog
Cat
category Birds:
Eagle
Sparrow
</question>

<question><fill_in_blank>
Water formula: H{{b1}}O is {{b2}}.
blank b1:
  - 2
blank b2:
  - water
</question>
</quiz_end>
</canvas_page>"""
    st.code(example, language="xml")
    st.caption("Paste this into a .txt file to test.")
